
# Name of this action
name: Automatic Deploy Economy Dashboard

# Event triggers on pull request event
# For more detail visit https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#on
on:
#  workflow_dispatch:
  push:
    branches:
      - main

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

# The jobs this action will run. You can write as many jobs as you want.
# For more detail on this section visit https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobs
jobs:
  # ID of the job
  package-build:
    # Name of the job as it will be displayed in GitHub
    name: Package files to upload
    # Machine which this action will be run on. For a list of all the machines available/how to run on self hosted machine visit
    # https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    runs-on: ubuntu-20.04

    # Steps this job must take to complete
    steps:
      # Reference the master branch. For more information visit https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstepsuses
      - name: Checkout under $GITHUB_WORKSPACE
        uses: actions/checkout@v2

      # Specify which version of Node this project is using. For more information visit.
      # https://docs.github.com/en/actions/guides/building-and-testing-nodejs#specifying-the-nodejs-version
      - name: Set up NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Create tmp folders
        run: |
          mkdir tmp

      - name: Make tar compressed file to transfer
        run:  |
          cp -r ./source/* ./tmp
          rm -rf ./tmp/.idea
          tar -czvf appfiles.tar.gz -C tmp .

      - name: Copy file via ssh with key
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DASHBOARD_HOST }}
          username: ${{ secrets.DASHBOARD_HOST_USER }}
          port: 22
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          source: "appfiles.tar.gz"
          target: "/home/ec2-user/data"

      - name: Deploy app files in EC2
        env:
            PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
            HOSTNAME : ${{ secrets.DASHBOARD_HOST  }}
            USER_NAME : ${{ secrets.DASHBOARD_HOST_USER  }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
            cd /home/ec2-user/data &&
            tar --overwrite -xzvf appfiles.tar.gz &&
            pip install -r requirements.txt
          '
